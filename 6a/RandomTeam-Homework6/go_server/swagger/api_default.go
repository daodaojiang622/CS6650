/*
 * Album Store API
 *
 * CS6650 Fall 2023
 *
 * API version: 1.0.0
 * Contact: i.gorton@northeasern.edu
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	//"path"
	"github.com/gorilla/mux"
)

func GetAlbumByKey(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	vars := mux.Vars(r)
	if vars["albumID"] == "1" {
		w.WriteHeader(http.StatusOK)
		albuminfo := AlbumInfo{
			Artist: "Sex Pistols",
			Title:  "Never Mind the Bollocks",
			Year:   "1977",
		}
		json.NewEncoder(w).Encode(albuminfo)
	} else {
		w.WriteHeader(http.StatusNotFound)
		fmt.Fprintf(w, "404 Not Found")
	}
}

func NewAlbum(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if err := r.ParseMultipartForm(10 << 20); err != nil {
		http.Error(w, "Error parsing request", http.StatusBadRequest)
		return
	}
	var artist = r.MultipartForm.Value["profile[artist]"]
	var title = r.MultipartForm.Value["profile[title]"]
	var year = r.MultipartForm.Value["profile[year]"]
	file, handler, err := r.FormFile("image")
	if err != nil {
		http.Error(w, "Error retrieving file", http.StatusBadRequest)
		return
	}
	defer file.Close()

	if _, err := io.ReadAll(file); err != nil {
		http.Error(w, "Error reading file", http.StatusInternalServerError)
		return
	}

	// Process the file (e.g., save it to disk, upload to cloud storage, etc.)
	// For demonstration, we'll just print the file size
	fmt.Printf("Uploaded File: %s\n", handler.Filename)
	fmt.Printf("File Size: %d\n", handler.Size)
	fmt.Printf("MIME Header: %v\n", handler.Header)

	// Create a new album instance
	album := AlbumInfo{
		Title:  title[0],
		Artist: artist[0],
		Year:   year[0],
	}
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(album)
	json.NewEncoder(w).Encode(handler.Size)
}
